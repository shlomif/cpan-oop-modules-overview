#include "shlomif-shlomif-article.wml"
<article_subject "Tracking the Number of Checks Using Test::Count" />
<article_description "Introduces the Test-Count distribution on CPAN that allows one to track the number of individual checks performed in a Test::More, etc. test" />
<article_keywords "Shlomi Fish, Shlomi, Fish, Test::Count, Test-Count, Test::More, counting" />

<h2 id="meta">Document Information</h2>

<dl class="meta">
<dt>
Written By:
</dt>
<dd>
<a href="http://www.shlomifish.org/">Shlomi Fish</a>
</dd>
<dt>
Version Control ID
</dt>
<dd>
<tt>$Id$</tt>
</dd>
<dt>
Finish Date:
</dt>
<dd>
20-August-2006
</dd>
<dt>
Last Updated:
</dt>
<dd>
20-August-2006
</dd>
</dl>

<h2 id="intro">Introduction</h2>

<p>
A typical <a href="http://search.cpan.org/dist/Test-Simple/">Test::More</a>
test script contains several checks. It is preferable to keep track of the
number of checks that the script is running (using 
<tt>use Test::More tests =&gt; $NUM_CHECKS</tt> or the 
<tt>plan tests =&gt; $NUM_CHECKS</tt>), so in case some checks do not get run 
for some reasons, the test script will still fail when being run by the 
harness.
</p>

<p>
Now, if you add more checks to a test file, then you'll have to remember to
update the plan. However, how do you keep track of how many tests 
<b>should</b> be run? I already encountered a case where 
<a href="http://dbi.perl.org/">a DBI related module</a> had a different number 
of tests with an older version of DBI than with a new one. 
</p>

<p>
Enter <a href="http://search.cpan.org/dist/Test-Count/">Test-Count</a>.
Test-Count originated from a <a href="http://www.vim.org/">vim</a> script I 
wrote to keep track of the number of tests by using meta-comments such as 
<tt># TEST</tt> (for one test) or <tt># TEST*3*5</tt> (for 15 tests). However, 
there was a limit to what I could do with vim's scripting language, as I wanted
a richer syntax for specifying the tests as well as variables.
</p>

<p>
Thus, I wrote the Test-Count module and placed it on CPAN. <a href="http://search.cpan.org/dist/Test-Count/lib/Test/Count/Filter.pm">Test::Count::Filter</a>
acts as a filter, counts the tests and updates them. Now let's see an example,
taken from a code I wrote for a Perl Quiz-of-the-Week:
</p>

<pre>
\#!/usr/bin/perl -w

\# This file implements various functions to remove 
\# all periods ("."'s) except the last from a string.

use strict;

use Test::More tests =&gt; 5;
use String::ShellQuote;

sub via_split
{
    my $s = shift;
    my @components = split(/\./, $s, -1);
    if (@components == 1)
    {
        return $s;
    }
    my $last = pop(@components);
    return join("", @components) . "." . $last;
}

\# Other Functions snipped.

\# TEST:$num_tests=9
\# TEST:$num_funcs=8
\# TEST*$num_tests*$num_funcs
foreach my $f (@funcs)
{
    my $ref = eval ("\\&amp;$f");
    is($ref-&gt;("hello.world.txt"), "helloworld.txt", "$f - simple"); # 1
    is($ref-&gt;("hello-there"), "hello-there", "$f - zero periods"); # 2
    is($ref-&gt;("hello..too.pl"), "hellotoo.pl", "$f - double"); # 3
    is($ref-&gt;("magna..carta"), "magna.carta", "$f - double at end"); # 4
    is($ref-&gt;("the-more-the-merrier.jpg"), 
       "the-more-the-merrier.jpg", "$f - one period"); # 5
    is($ref-&gt;("hello."), "hello.", "$f - one period at end"); # 6
    is($ref-&gt;("perl.txt."), "perltxt.", "$f - period at end"); # 7
    is($ref-&gt;(".yes"), ".yes", "$f - one period at start"); # 8
    is($ref-&gt;(".yes.txt"), "yes.txt", "$f - period at start"); # 9
}
</pre>

<p>
Now if we filter this script through Test::Count::Filter, we'll get the
correct number of tests. What I do is add this to my <tt>.vimrc</tt>:
</p>

<pre>
function! Perl_Tests_Count()
    %!perl -MTest::Count::Filter -e 'Test::Count::Filter-&gt;new({})-&gt;process()'
endfunction

autocmd BufNewFile,BufRead *.t map &lt;F3&gt; :call Perl_Tests_Count()&lt;CR&gt;
</pre>

<p>
That way I can press the "F3" key and the number of checks would be updated.
</p>

<p>
Test::Count supports +,-,* and / as well as parenthesis, and so it is
expressive enough for most needs.
</p>

<h2 id="acknowledgements">Acknowledgements</h2>

<p>
Thanks to mrMister from <a href="http://www.freenode.net/">Freenode</a> for
going over earlier drafts of this article and correcting some problems.
</p>

